ns: crypto
preamble: |
  A set of crypto-related functions to be able to perform hashing and (simple!) encryption operations with `gomplate`.

  _Note: These functions are mostly wrappers of existing functions in the Go standard library. The authors of gomplate are not cryptographic experts, however, and so can not guarantee correctness of implementation. It is recommended to have your resident security experts inspect gomplate's code before using gomplate for critical security infrastructure!_
funcs:
  - name: crypto.Bcrypt
    description: |
      Uses the [bcrypt](https://en.wikipedia.org/wiki/Bcrypt) password hashing algorithm to generate the hash of a given string. Wraps the [`golang.org/x/crypto/brypt`](https://godoc.org/golang.org/x/crypto/bcrypt) package.
    pipeline: true
    arguments:
      - name: cost
        required: false
        description: the cost, as a number from `4` to `31` - defaults to `10`
      - name: input
        required: true
        description: the input to hash, usually a password
    examples:
      - |
        $ gomplate -i '{{ "foo" | crypto.Bcrypt }}'
        $2a$10$jO8nKZ1etGkKK7I3.vPti.fYDAiBqwazQZLUhaFoMN7MaLhTP0SLy
      - |
        $ gomplate -i '{{ crypto.Bcrypt 4 "foo" }}
        $2a$04$zjba3N38sjyYsw0Y7IRCme1H4gD0MJxH8Ixai0/sgsrf7s1MFUK1C
  - name: crypto.PBKDF2
    description: |
      Run the Password-Based Key Derivation Function &num;2 as defined in
      [RFC 8018 (PKCS &num;5 v2.1)](https://tools.ietf.org/html/rfc8018#section-5.2).

      This function outputs the binary result as a hexadecimal string.
    pipeline: false
    arguments:
      - name: password
        required: true
        description: the password to use to derive the key
      - name: salt
        required: true
        description: the salt
      - name: iter
        required: true
        description: iteration count
      - name: keylen
        required: true
        description: desired length of derived key
      - name: hashfunc
        required: false
        description: the hash function to use - must be one of the allowed functions (either in the SHA-1 or SHA-2 sets). Defaults to `SHA-1`
    examples:
      - |
        $ gomplate -i '{{ crypto.PBKDF2 "foo" "bar" 1024 8 }}'
        32c4907c3c80792b
  - rawName: '`crypto.SHA1`, `crypto.SHA224`, `crypto.SHA256`, `crypto.SHA384`, `crypto.SHA512`, `crypto.SHA512_224`, `crypto.SHA512_256`'
    description: |
      Compute a checksum with a SHA-1 or SHA-2 algorithm as defined in [RFC 3174](https://tools.ietf.org/html/rfc3174) (SHA-1) and [FIPS 180-4](http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf) (SHA-2).

      These functions output the binary result as a hexadecimal string.

      _Note: SHA-1 is cryptographically broken and should not be used for secure applications._
    pipeline: false
    rawUsage: |
      ```
      crypto.SHA1 input
      crypto.SHA224 input
      crypto.SHA256 input
      crypto.SHA384 input
      crypto.SHA512 input
      crypto.SHA512_224 input
      crypto.SHA512_256 input
      ```
    arguments:
      - name: input
        required: true
        description: the data to hash - can be binary data or text
    examples:
      - |
        $ gomplate -i '{{ crypto.SHA1 "foo" }}'
        f1d2d2f924e986ac86fdf7b36c94bcdf32beec15
      - |
        $ gomplate -i '{{ crypto.SHA512 "bar" }}'
        cc06808cbbee0510331aa97974132e8dc296aeb795be229d064bae784b0a87a5cf4281d82e8c99271b75db2148f08a026c1a60ed9cabdb8cac6d24242dac4063
  - name: crypto.WPAPSK
    description: |
      This is really an alias to [`crypto.PBKDF2`](#crypto.PBKDF2) with the
      values necessary to convert ASCII passphrases to the WPA pre-shared keys for use with WiFi networks.

      This can be used, for example, to help generate a configuration for [wpa_supplicant](http://w1.fi/wpa_supplicant/).
    pipeline: false
    arguments:
      - name: ssid
        required: true
        description: the WiFi SSID (network name) - must be less than 32 characters
      - name: password
        required: true
        description: the password - must be between 8 and 63 characters
    examples:
      - |
        $ PW=abcd1234 gomplate -i '{{ crypto.WPAPSK "mynet" (getenv "PW") }}'
        2c201d66f01237d17d4a7788051191f31706844ac3ffe7547a66c902f2900d34

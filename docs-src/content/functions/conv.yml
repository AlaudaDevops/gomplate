ns: conv
preamble: |
  These are a collection of functions that mostly help converting from one type
  to another - generally from a `string` to something else, and vice-versa.
funcs:
  - name: conv.Bool
    alias: bool
  - name: conv.Default
    alias: default
  - name: conv.Dict
    alias: dict
    description: |
      Dict is a convenience function that creates a map with string keys.
      Provide arguments as key/value pairs. If an odd number of arguments
      is provided, the last is used as the key, and an empty string is
      set as the value.

      All keys are converted to strings.

      This function is equivalent to [Sprig's `dict`](http://masterminds.github.io/sprig/dicts.html#dict)
      function, as used in [Helm templates](https://docs.helm.sh/chart_template_guide#template-functions-and-pipelines).

      For creating more complex maps or maps with non-`string` keys, see
      [`data.JSON`](../data/#data-json) or [`data.YAML`](../data/#data-yaml).

      For creating arrays, see [`conv.Slice`](#conv-slice).
    arguments:
      - name: in...
        required: true
        description: The key/value pairs
    examples:
      - |
        $ gomplate -i '{{ conv.Dict "name" "Frank" "age" 42 | data.ToYAML }}'
        age: 42
        name: Frank
        $ gomplate -i '{{ dict 1 2 3 | toJSON }}'
        {"1":"2","3":""}
      - |
        $ cat <<EOF| gomplate
        {{ define "T1" }}Hello {{ .thing }}!{{ end -}}
        {{ template "T1" (dict "thing" "world")}}
        {{ template "T1" (dict "thing" "everybody")}}
        EOF
        Hello world!
        Hello everybody!
  - name: conv.Slice
    alias: slice
  - name: conv.Has
    alias: has
  - name: conv.Join
    alias: join
  - name: conv.URL
  - name: conv.ParseInt
  - name: conv.ParseFloat
  - name: conv.ParseUint
  - name: conv.Atoi
  - name: conv.ToBool
    description: |
      Converts the input to a boolean value.
      Possible `true` values are: `1` or the strings `"t"`, `"true"`, or `"yes"`
      (any capitalizations). All other values are considered `false`.
    pipeline: true
    arguments:
      - name: input
        required: true
        description: The input to convert
    examples:
      - |
        $ gomplate -i '{{ conv.ToBool "yes" }} {{ conv.ToBool true }} {{ conv.ToBool "0x01" }}'
        true true true
        $ gomplate -i '{{ conv.ToBool false }} {{ conv.ToBool "blah" }} {{ conv.ToBool 0 }}'
        false false false
  - name: conv.ToBools
    description: |
      Converts a list of inputs to an array of boolean values.
      Possible `true` values are: `1` or the strings `"t"`, `"true"`, or `"yes"`
      (any capitalizations). All other values are considered `false`.
    pipeline: true
    arguments:
      - name: input
        required: true
        description: The input array to convert
    examples:
      - |
        $ gomplate -i '{{ conv.ToBools "yes" true "0x01" }}'
        [true true true]
        $ gomplate -i '{{ conv.ToBools false "blah" 0 }}'
        [false false false]
  - name: conv.ToInt64
  - name: conv.ToInt
  - name: conv.ToInt64s
  - name: conv.ToInts
  - name: conv.ToFloat64
  - name: conv.ToFloat64s
  - name: conv.ToString
  - name: conv.ToStrings
